package Assignment14;

import java.util.*;

public class LinkedQueue {
    private List<Integer> list;

    public LinkedQueue() {
        this.list = new LinkedList<>();
    }

    public void enque(int data){
        list.add(data);
    }

    public int deque(){
        int dequed = list.remove(0);
        return dequed;
    }

    public void display(){
        System.out.println(list);
    }
}

package Assignment14;

public class MyArrayQueue {
    private int[] arr;
    private final int initial_capacity;
    private int rear;

    public MyArrayQueue(int initial_capacity) {
        this.initial_capacity = initial_capacity;
        this.arr = new int[initial_capacity];
        this.rear = -1;
    }
    public boolean isFull(){
        return rear == initial_capacity-1;
    }

    public boolean isEmpty(){
        return rear == -1;
    }
    public void enqueue(int data){
        if(isFull()){
            System.out.println("Over Flow");
            return ;
        }
        arr[++rear] = data;
    }

    public int deque(){
        if(isEmpty()){
            System.out.println("Under Flow");
            return -1;
        }
        int dequed = arr[0];

        for(int i=0;i<rear;i++){
            arr[i] = arr[i+1];
        }
        return dequed;
    }

    public void display(){
        for(int i=0;i<rear;i++){
            System.out.print(arr[i]+" ->");
        }
    }
}

package Assignment14;

import java.util.*;

public class Main {
    
    public static void reverse1StK(Queue<Integer> que, int k){
        Queue<Integer> tempq = new LinkedList();
        Stack<Integer> tempst = new Stack<>();

        for(int i=0;i<k;i++){
            tempst.push(que.poll());
        }
        while(!que.isEmpty()){
            tempq.offer(que.poll());
        }

        while(!tempst.isEmpty()){
            que.offer(tempst.pop());
        }

        while(!tempq.isEmpty()){
            que.offer(tempq.poll());
        }
    }

    public static void main(String[] args) {
        // MyArrayQueue queue = new MyArrayQueue(3);

        // queue.enqueue(10);
        // queue.enqueue(20);
        // queue.enqueue(30);
        // queue.enqueue(40);
        // queue.deque();
        // queue.display();

        // LinkedQueue lq = new LinkedQueue();

        // lq.enque(10);
        // lq.enque(20);
        // lq.enque(30);
        // lq.enque(40);
        // lq.deque();
        // lq.display();
        
        Queue<Integer> q = new LinkedList<>();

        q.offer(10);
        q.offer(20);
        q.offer(30);
        q.offer(40);
        q.offer(50);
        q.add(100);

        System.out.println(q);

        reverse1StK(q, 3);
        System.out.println(q);
    }
}