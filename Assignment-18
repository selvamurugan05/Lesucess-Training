1)


import java.util.*;

public class BFSGraphTraversal {
    public static List<Integer> bfsTraversal(int V, List<List<Integer>> adj) {
        List<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();

       
        queue.add(0);
        visited[0] = true;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            result.add(node);

            
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }

        return result;
    }

    public static void main(String[] args) {
       
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2));        
        adj.add(Arrays.asList(0, 2, 3));      
        adj.add(Arrays.asList(0, 1, 4));     
        adj.add(Arrays.asList(1, 4));         
        adj.add(Arrays.asList(2, 3));         

        int V = adj.size();

        List<Integer> bfsResult = bfsTraversal(V, adj);
        System.out.println(bfsResult);
    }
}




2)


import java.util.*;

public class DFSGraphTraversal {
   
    private static void dfs(int node, List<List<Integer>> adj, boolean[] visited, List<Integer> result) {
        visited[node] = true;
        result.add(node);

        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, result);
            }
        }
    }

    public static List<Integer> dfsTraversal(int V, List<List<Integer>> adj) {
        boolean[] visited = new boolean[V];
        List<Integer> result = new ArrayList<>();

       
        dfs(0, adj, visited, result);

        return result;
    }

    public static void main(String[] args) {
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2));        
        adj.add(Arrays.asList(0, 2));       
        adj.add(Arrays.asList(0, 1, 3, 4));  
        adj.add(Arrays.asList(2));           
        adj.add(Arrays.asList(2));           

        int V = adj.size();

        List<Integer> dfsResult = dfsTraversal(V, adj);
        System.out.println(dfsResult);
    }
}
