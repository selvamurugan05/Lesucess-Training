1)

import java.util.Scanner;

class Node {
    int data;
    Node prev, next;

    Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;

    public void createList(int n, Scanner sc) {
        for (int i = 1; i <= n; i++) {
            System.out.print("Enter value for node " + i + ": ");
            int val = sc.nextInt();
            insertAtEnd(val);
        }
    }

    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head.prev = newNode;
        head = newNode;
    }

    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node curr = head;
        while (curr.next != null) {
            curr = curr.next;
        }
        curr.next = newNode;
        newNode.prev = curr;
    }

    public void insertAtPosition(int data, int position) {
        if (position == 1) {
            insertAtBeginning(data);
            return;
        }

        Node newNode = new Node(data);
        Node curr = head;
        int count = 1;

        while (curr != null && count < position - 1) {
            curr = curr.next;
            count++;
        }

        if (curr == null) {
            System.out.println("Position out of bounds");
            return;
        }

        newNode.next = curr.next;
        if (curr.next != null) {
            curr.next.prev = newNode;
        }
        curr.next = newNode;
        newNode.prev = curr;
    }

    public void deleteFirst() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        head = head.next;
        if (head != null) {
            head.prev = null;
        }
    }

    public void deleteLast() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (head.next == null) {
            head = null;
            return;
        }
        Node curr = head;
        while (curr.next != null) {
            curr = curr.next;
        }
        curr.prev.next = null;
    }

   
    public void deleteAtPosition(int position) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        if (position == 1) {
            deleteFirst();
            return;
        }

        Node curr = head;
        int count = 1;

        while (curr != null && count < position) {
            curr = curr.next;
            count++;
        }

        if (curr == null) {
            System.out.println("Position out of bounds");
            return;
        }

        if (curr.next != null) {
            curr.next.prev = curr.prev;
        }
        if (curr.prev != null) {
            curr.prev.next = curr.next;
        }
    }


    public void displayForward() {
        Node curr = head;
        System.out.print("List: ");
        while (curr != null) {
            System.out.print(curr.data);
            if (curr.next != null) System.out.print(" <-> ");
            curr = curr.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        DoublyLinkedList dll = new DoublyLinkedList();

        System.out.print("Enter number of nodes to create: ");
        int n = sc.nextInt();
        dll.createList(n, sc);
t
        System.out.println("\nOriginal List:");
        dll.displayForward();
g
        System.out.print("Enter value to insert at beginning: ");
        int valBeg = sc.nextInt();
        dll.insertAtBeginning(valBeg);
        System.out.println("After inserting at beginning:");
        dll.displayForward();

        System.out.print("Enter value to insert at end: ");
        int valEnd = sc.nextInt();
        dll.insertAtEnd(valEnd);
        System.out.println("After inserting at end:");
        dll.displayForward();

        System.out.print("Enter value to insert at 3rd position: ");
        int valPos = sc.nextInt();
        dll.insertAtPosition(valPos, 3);
        System.out.println("After inserting at 3rd position:");
        dll.displayForward();

        dll.deleteFirst();
        System.out.println("After deleting first node:");
        dll.displayForward();

        dll.deleteLast();
        System.out.println("After deleting last node:");
        dll.displayForward();

        dll.deleteAtPosition(3);
        System.out.println("After deleting node at 3rd position:");
        dll.displayForward();

        sc.close();
    }
}
